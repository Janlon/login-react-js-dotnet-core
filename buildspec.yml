version: 0.2

env:
  variables:
    GRADLE_OPTS: -Xmx1024m
    SERVICE_NAME: "teste"
    AWS_S3_BUCKET_UPLOAD_URL: "s3://repo/"
    AWS_S3_BUCKET_UPLOAD_FOLDER: "janlon_teste"
    SAM_TEMPLATE: "sam.yaml"
    SAM_TEMPLATE_WITH_VERSION: "sam-with-version.yaml"
    CLOUDFORMATION_TEMPLATE_OUTPUT: "cf-codepipeline.yaml"
    CLOUDFORMATION_STACK_NAME: "tfs-dev-lambda-teste"
  parameter-store:
    AWS_S3_BUCKET_ACCESS_KEY: "/CodeBuild/TFS/S3_ACCESS_KEY"
    AWS_S3_BUCKET_SECRET_KEY: "/CodeBuild/TFS/S3_SECRET_KEY"

phases:
  install:
    commands:
      - echo [PHASE] Entered the install phase...
      - # 1. We install aws-cli (Alpine Linux)
      - apk --no-cache update
      - apk --no-cache add python py-pip py-setuptools ca-certificates curl groff less
      - pip --no-cache-dir install awscli
  pre_build:
    commands:
      - echo [PHASE] Entered the pre_build phase...
      - chmod +x ./gradlew
      - currentVersion=$(cat version | sed 's/-SNAPSHOT//' | tr -d ' ')
      # 1. Preparing Gradle for the build
      - touch gradle.properties
      - echo "org.gradle.daemon=false" > gradle.properties
      - echo "org.gradle.parallel=false" >> gradle.properties
      - echo "org.gradle.incremental=false" >> gradle.properties
      - echo "kotlin.incremental=false" >> gradle.properties
      # 2. Running tests
      - ./gradlew $SERVICE_NAME-domain:test --no-daemon -Dorg.gradle.parallel=false
      - ./gradlew $SERVICE_NAME-data:test --no-daemon -Dorg.gradle.parallel=false
      - ./gradlew $SERVICE_NAME-common:test --no-daemon -Dorg.gradle.parallel=false
  build:
    commands:
      - echo [PHASE] Entered the build phase...
      - ./gradlew build -x test --no-daemon -Dorg.gradle.parallel=false
  post_build:
    commands:
      - echo [PHASE] Entered the post_build phase...
      # 1. Uploading to S3
      - aws s3 cp ./build/libs/$SERVICE_NAME.jar $AWS_S3_BUCKET_UPLOAD_URL$AWS_S3_BUCKET_UPLOAD_FOLDER/$SERVICE_NAME-$currentVersion.jar
      # 2. We package and deploy with SAM
      - cat $SAM_TEMPLATE | sed "s/SEMVER/$currentVersion/" > $SAM_TEMPLATE_WITH_VERSION
      - aws cloudformation package --template-file=$SAM_TEMPLATE_WITH_VERSION --s3-bucket=$AWS_S3_BUCKET_UPLOAD_URL --output-template-file=$CLOUDFORMATION_TEMPLATE_OUTPUT
      - aws cloudformation deploy --template-file=$CLOUDFORMATION_TEMPLATE_OUTPUT --stack-name=$CLOUDFORMATION_STACK_NAME --capabilities=CAPABILITY_IAM
